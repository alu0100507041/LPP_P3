18. Escriba el programa que muestra por la consola la frase "Hola Mundo".¿Qué significado tiene la salida? (puts ’Hola Mundo’)

Sale por pantala Hola Mundo pero lo que devuelve puts es nil.

21. ¿Qué diferencia hay entre "\t\n" y ’\t\n’?

"\t\n" Devuelve tabulador y salto de linea por ir entre "". En cambio '\t\n' lo trata como una cadena.

2.0.0-p247 :004 > puts "\t\n"
	
 => nil

2.0.0-p247 :005 > puts '\t\n'
\t\n
 => nil 

22. ¿Cómo funciona %q? ¿Que es %q{hello world\n}? ¿Que es %q{’a’ ’b’ ’c’}?

%q funciona como comillas simples ''

a = %q{hello world\n}
 => "hello world\\n"
2.0.0-p247 :021 > puts a
hello world\n
 => nil 

2.0.0-p247 :011 > b = %q{'a' 'b' 'c'}
 => "'a' 'b' 'c'" 
2.0.0-p247 :025 > puts b
'a' 'b' 'c'
2.0.0-p247 :012 > b.class
 => String 

23. ¿Como funciona %Q? ¿Que es %Q{hello world\n}? ¿Que es %Q{"a" "b" "c"}?

%Q funciona como las comillas dobles

2.0.0-p247 :017 > a = %Q{hello world\n}
 => "hello world\n" 
2.0.0-p247 :019 > puts a
hello world

2.0.0-p247 :022 > b = %Q{"a" "b" "c"}
 => "\"a\" \"b\" \"c\"" 
2.0.0-p247 :023 > puts b
"a" "b" "c"

24. ¿Que queda en c? 

irb(main):001:0> a = 4
=> 4
irb(main):002:0> b =2
=> 2
irb(main):003:0> c = <<HERE
irb(main):004:0" --#{a}--
irb(main):005:0" --#{b}--
irb(main):006:0" HERE

2.0.0-p247 :033 > puts c
--4--
--2--
 => nil 

25. ¿Que queda en c?

irb(main):001:0> a = 4
=> 4
irb(main):002:0> b =2
=> 2
irb(main):008:0> c = <<’HERE’
irb(main):009:0’ --#{a}--
irb(main):010:0’ --#{b}--
irb(main):011:0’ HERE

2.0.0-p247 :041 > puts c
--#{a}--
--#{b}--
 => nil 

26. s = "hello". ¿Cual es el valor de las siguientes expresiones?
s[0,2] (empiece en la posicion 0 y coger longitud 2)
s[-1,1]
s[0,10]

2.0.0-p247 :043 > s[0,2]
 => "he" 

2.0.0-p247 :044 > s[-1,1]
 => "o" 

2.0.0-p247 :045 > s[0,10]
 => "hello" 

27. ¿Que queda en g?

>> g = "hello"
=> "hello"
>> g << " world"

2.0.0-p247 :048 > puts g
hello world

28. ¿Que queda en e?
>> e = ’.’*3

2.0.0-p247 :050 > puts e
...


29. ¿Cual es el resultado?
>> a = 1
=> 1
>> "#{a=a+1} "*3

2.0.0-p247 :058 > b = "#{a=a+1} "*3
 => "2 2 2 " 
2.0.0-p247 :059 > puts b
2 2 2 
 => nil

30. ¿Que es esto?
%w[this is a test]

2.0.0-p247 :061 > a = %w[this is a test]
 => ["this", "is", "a", "test"] 
2.0.0-p247 :062 > puts a
this
is
a
test
 => nil 
2.0.0-p247 :063 > a.class
 => Array 


31. ¿Que es esto?
%w[\t \n]

2.0.0-p247 :064 > a = %w[\t \n]
 => ["\\t", "\\n"] 
2.0.0-p247 :065 > puts a
\t
\n
 => nil 
2.0.0-p247 :066 > a.class
 => Array 


32. ¿Que es esto?
%W[\t \n]

2.0.0-p247 :067 > a = %W[\t \n]
 => ["\t", "\n"] 
2.0.0-p247 :068 > puts a
	

 => nil 
2.0.0-p247 :069 > a.class
 => Array 

33. ¿Que contiene nils?
nils = Array.new(3)

2.0.0-p247 :070 > nils = Array.new(3)
 => [nil, nil, nil] 
2.0.0-p247 :071 > puts nils



 => nil 

34. ¿Que contiene zeros?
zeros = Array.new(3, 0)

2.0.0-p247 :072 > zeros = Array.new(3, 0)
 => [0, 0, 0] 
2.0.0-p247 :073 > puts zeros
0
0
0
 => nil 

35. ¿Que queda en b?
>> x = [[1,2],[3,4]]
=> [[1, 2], [3, 4]]
>> b = Array.new(x)

2.0.0-p247 :077 > puts b
1
2
3
4
 => nil

36. ¿Que queda en c?
>> c = Array.new(3) { |i| 2*i }

2.0.0-p247 :078 > c = Array.new(3) { |i| 2*i }
 => [0, 2, 4] 
2.0.0-p247 :079 > puts c
0
2
4
 => nil 

37. ¿Cual es el resultado de cada una de estas operaciones?
>> a = (’a’..’e’).to_a
=> ["a", "b", "c", "d", "e"]
>> a[1,1]
=> ["b"] 
>> a[-2,2]
=> ["d", "e"] 
>> a[0..2]
=> ["a", "b", "c"] 
>> a[0...1]
=> ["a"]
>> a[-2..-1]
=> ["d", "e"] 

38. ¿Cual es el resultado de cada una de estas operaciones?
>> a
=> ["a", "b", "c", "d", "e"]
>> a[0,2] = %w{A B}
=> ["A", "B"]
>> a
=> ["A", "B", "c", "d", "e"] 
>> a[2..5] = %w{C D E}
=> ["C", "D", "E"]
>> a
=> ["A", "B", "C", "D", "E"]
>> a[0,0] = [1,2,3]
=> [1, 2, 3]
>> a
=> [1, 2, 3, "A", "B", "C", "D", "E"] 
>> a[0,2] = []
=> []
>> a
=> [3, "A", "B", "C", "D", "E"] 
>> a[-1,1] = [ ’Z’ ]
=> ["Z"]
>> a
=> [3, "A", "B", "C", "D", "Z"] 
>> a[-2,2] = nil
=> nil
>> a
=> [3, "A", "B", "C", nil]


39. ¿Cual es el resultado de cada una de estas operaciones?
>> a = (1...4).to_a
=> [1, 2, 3, 4] 
>> a = a + [4, 5]
=> [1, 2, 3, 4, 4, 5] 
>> a += [[6, 7, 8]]
=> [1, 2, 3, 4, 4, 5, [6, 7, 8]] 
>> a = a + 9

40. ¿Cual es el resultado de cada una de estas operaciones?
>> x = %w{a b c b a}
=> ["a", "b", "c", "b", "a"] 
>> x = x - %w{b c d}
=> ["a", "a"]


41. ¿Cu ́al es el resultado de cada una de estas operaciones?
>> z = [0]*8
=> [0, 0, 0, 0, 0, 0, 0, 0] 


42. ¿Cual es el resultado de cada una de estas operaciones?
>> a = []
=> []
>> a << 1
=> [1] 
>> a << 2 << 3
=> [1, 2, 3]
>> a << [4, 5, 6]
=> [1, 2, 3, [4, 5, 6]] 
>> a.concat [7, 8]
=> [1, 2, 3, [4, 5, 6], 7, 8]

43. ¿Cu ́al es el resultado de cada una de estas operaciones?
>> a = [1, 1, 2, 2, 3, 3, 4]
=> [1, 1, 2, 2, 3, 3, 4]
>> b = [5, 5, 4, 4, 3, 3, 2]
=> [5, 5, 4, 4, 3, 3, 2]
>> c = a | b
=> [1, 2, 3, 4, 5]
>> d = b | a
=> [5, 4, 3, 2, 1] 
>> e = a & b
=> [2, 3, 4] 
>> f = b & a
=> [4, 3, 2] 

44. ¿Que resultados dan las siguientes operaciones?
>> a = 1..10
=> 1..10
>> a.class
=> Range
>> a.to_a
=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] 
>> b = 1...10
=> 1....10
>> b.to_a
=> [1, 2, 3, 4, 5, 6, 7, 8, 9]
>> b.include? 10
=> false
>> b.include? 8
=> true
>> b.step(2) {|x| print "#{x} " }
>> 1..3.to_a

45. ¿Que resultados dan las siguientes operaciones?
>> r = 0...100
=> 0....100
>> r.member? 50
=> true
>> r.include? 99.9
=> true
>> r.member? 99.9
=> true

46. ¿Que resultados dan las siguientes operaciones?
>> true.class
=>TrueClass 
>> false.class
=> FalseClass
>> puts "hello" if 0
hello
=> nil
>> puts "hello" if nil
=> nil 
>> puts "hello" if ""
=> nil

47. ¿Que resultados dan las siguientes operaciones?
>> x = :sym
=> :sym
>> x.class
=> Symbol
>> x == ’sym’
=> false
>> x == :sym
=> true
>> z = :’a long symbol’
=> :"a long symbol"
>> z.class
=> Symbol
>> x == ’sym’.to_sym
=> true
>> x.to_s == ’sym’
=> true

48. ¿Que resultados se dan?
>> s = "Ruby"
=> "Ruby"
>> t = s
=> "Ruby"
>> t[-1] = ""
=> ""
>> print s
=> nil
>> t = "Java"
=> "Java"
>> print s, t
RubJava => nil 

49. ¿Cual es el resultado?
>> "%d %s" % [3, "rubies"]
=> "3 rubies" 

50. ¿Cu ́ales son los resultados?
>> x, y = 4, 5
=> [4, 5] 
>> z = x > y ? x : y
=> 5
>> x,y,z = [1,2,3]
=> [1, 2, 3] 

51. ¿Que resultados dan las siguientes operaciones?
>> x = { :a => 1, :b => 2 }
=> {:b=>2, :a=>1}
>> x.keys
=> [:a, :b] 
>> x.values
=> [1, 2] 
>> x[:c] = 3
=> 3
>> x
=> {:a=>1, :b=>2, :c=>3}
>> x.delete(’a’)
=> nil
>> x
=> {:a=>1, :b=>2, :c=>3} 
>> x.delete(:a)
=> 1
>> x
=> {:b=>2, :c=>3} 
>> x = { :a => 1, :b => 2, :c => 4 }
=> {:b=>2, :c=>4, :a=>1}
>> x.delete_if { |k,v| v % 2 == 0 }
=> {:a=>1} 
>> x
=> {:a=>1} 

52. ¿Que hace yield 4, 5?

Llama al bloque 4 y 5.

53. ¿Que hace la siguiente sentencia?
counts = Hash.new(0)

Crear un hash vacio pero llama al metodo new.

¿Que diferencia hay con la asignacion counts = {}?

Que new es un metodo de la clase Hash y es el constructor del hash. Mientras que {} crea un hash vacio.

54. ¿Que retorna esta expresion?
’hello world, hello LPP’.scan /\w+/

55. Explique que hacen estas sentencias:
c = { :a => 3, :b => 2, :c => 1 } Crea un hash con los valores 3, 2 y 1
c.keys.sort.each { |k| puts c[k] } Recorre el hash mostrando los elementos



